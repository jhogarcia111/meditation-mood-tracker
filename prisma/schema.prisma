// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  userId     String   @unique @map("user_id")
  email      String   @unique
  password   String
  role       Role     @default(USER)
  country    String?
  language   Language @default(ES)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  dailyRecords DailyRecord[]
  activityLogs ActivityLog[]

  @@map("users")
}

model Feeling {
  id        String   @id @default(cuid())
  nameEs    String   @map("name_es")
  nameEn    String   @map("name_en")
  category  Category
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  feelingRatings FeelingRating[]

  @@map("feelings")
}

model DailyRecord {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  date             DateTime @db.Date
  meditationType   String?  @map("meditation_type")
  meditationNotes  String?  @map("meditation_notes")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  feelingRatings FeelingRating[]

  // Removido @@unique para permitir múltiples registros por día
  @@map("daily_records")
}

model FeelingRating {
  id            String   @id @default(cuid())
  dailyRecordId String   @map("daily_record_id")
  feelingId     String   @map("feeling_id")
  beforeRating  Int      @map("before_rating")
  afterRating   Int      @map("after_rating")
  createdAt     DateTime @default(now()) @map("created_at")

  dailyRecord DailyRecord @relation(fields: [dailyRecordId], references: [id], onDelete: Cascade)
  feeling     Feeling     @relation(fields: [feelingId], references: [id])

  @@unique([dailyRecordId, feelingId])
  @@map("feeling_ratings")
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  action      String
  details     String?
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

enum Role {
  USER
  ADMIN
}

enum Category {
  GOOD
  BAD
}

enum Language {
  ES
  EN
}

model Meditation {
  id          String   @id @default(cuid())
  title       String
  description String
  youtubeUrl  String   @map("youtube_url")
  duration    Int      // duración en minutos
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  tags        MeditationTag[]

  @@map("meditations")
}

model MeditationTag {
  id           String      @id @default(cuid())
  name         String      @unique
  description  String?
  isActive     Boolean     @default(true) @map("is_active")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  meditations  Meditation[]

  @@map("meditation_tags")
}
